package org.itri.oms.printing;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPageable;
import org.itri.oms.printing.jms.RabbitMqListenContainer;
import org.itri.oms.printing.jms.Setting;

import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

import localPrint.PrintUsingDotMatrix;

public class PrinterCombo extends javax.swing.JFrame {

	private String restHost;
	private Setting setting;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private PrintService[] printServices;
	private PrintService selectedPrinter;
	private String[] printers;
	private static int mode = 1;
	private RabbitMqListenContainer listener;
	

	/**
	 * Creates new form PrinterCombo
	 */
	public PrinterCombo(Setting setting, RabbitMqListenContainer listener) {
		this.setting = setting;
		//預設為測試機
		this.restHost = setting.getSettingMap().get(Setting._KEY_SERVER_URL).toString();
		this.listener = listener;
		initComponents();
		this.setTitle("點陣式印表機服務");
	}

	

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		printerCb = new javax.swing.JComboBox<>();
		printerCb.setEnabled(true);
		printBt = new javax.swing.JButton();
		printBt.setEnabled(true);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setResizable(false);

		printerCb.setModel(findPrintService());

		Optional<String> optional = Arrays.stream(printers).filter(x -> x.contains("EPSON")).findFirst();
		if (optional.isPresent()) {
			printerCb.setSelectedItem(optional.get());
		}
		setQueueCb();


		// vhostModel.setModel(new DefaultComboBoxModel(new String[] { "oms", "oms-test"
		// }));
		vhostModel.setModel(new DefaultComboBoxModel(new String[] { omsVhost, testVhost }));
		vhostModel.setSelectedIndex(0);
		
		vhostModel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String restHost = null;
				switch (vhostModel.getSelectedItem().toString()) {
				case omsVhost:
					restHost = "http://otms.gogoffcc.com//mtms_admin//";
					break;
				case testVhost:
					restHost = "http://testotms.gogoffcc.com//mtms_admin//";
					break;
				default:
					restHost = "http://testotms.gogoffcc.com//mtms_admin/";
					break;
				}
				setQueueCb();
		}});
		
		printBt = new JButton("接受列印");
		printBt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				try {
					receivePrintBtActionPerformed(e, printBt);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					message1Label.setText(e1.getMessage());
				} catch (TimeoutException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					message1Label.setText(e1.getMessage());
				}
				selectedPrinter = printServices[printerCb.getSelectedIndex()];
				message1Label.setText("OMS主機：" + vhostModel.getSelectedItem() + "【" + listener.get_vhost() + "】");
				message2Label.setText("印表機:" + printerCb.getSelectedItem() + "接受列印服務..");
				message1Label.setVisible(true);
				message2Label.setVisible(true);
			}
		});

		message1Label.setText("設定完成後，請按接受列印");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		layout.setHorizontalGroup(layout.createSequentialGroup()
				.addGroup(layout.createParallelGroup().addComponent(labelvHostName).addComponent(vhostModel)
						.addComponent(labelPrinterName).addComponent(printerCb).addComponent(labelQueueName)
						.addComponent(queueCb).addComponent(message1Label).addComponent(message2Label))
				.addGroup(layout.createParallelGroup().addComponent(printBt)));

		layout.setVerticalGroup(layout.createSequentialGroup().addGap(10)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelvHostName))
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(vhostModel))
				.addGap(10)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelPrinterName))
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(printerCb))
				.addGap(10)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelQueueName))
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(queueCb))
				.addGap(20)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(message1Label)
						.addComponent(printBt))
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(message2Label))
				.addGap(50));

		getContentPane().setLayout(layout);
		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void receivePrintBtActionPerformed(java.awt.event.ActionEvent evt, JButton button)
			throws IOException, TimeoutException {
		String vhost = null;
		switch (vhostModel.getSelectedItem().toString()) {
		case omsVhost:
			vhost = "oms";
			break;
		case testVhost:
			vhost = "oms-test";
			break;
		default:
			vhost = "oms-test";
			break;
		}
		listener.createQueueChannel(vhost,queueCb.getSelectedItem().toString());
		listener.getPrintMqListener().setPrinterCombo(this);
	}

	private void setQueueCb(){
		queueCb = new JComboBox();
		queueCb.setEnabled(true);
		Object[] queueNames = findQueueName();
		if (queueNames == null)
			queueNames = new Object[] { setting.getSettingMap().get(Setting._KEY_QUEUE_NAME) };
		String queueNameLb = (String) Arrays.stream(queueNames).filter(
				name -> name.toString().startsWith((String) setting.getSettingMap().get(Setting._KEY_QUEUE_NAME)))
				.findFirst().orElse("");
		int index = Arrays.asList(queueNames).indexOf(queueNameLb);
		this.queueCb.setModel(new DefaultComboBoxModel(queueNames));
		this.queueCb.setSelectedIndex(2);
	}


	public PrintService returnSelectedPrinter() {
		selectedPrinter = printServices[printerCb.getSelectedIndex()];
		return selectedPrinter;
	}

	private Object[] findQueueName() {
		OkHttpClient client = new OkHttpClient();
		String url = restHost + "/waybillPrintOutSetting/getShipperAccountList";
		Request request = new Request.Builder().url(url).build();
		Response response;
		try {
			response = client.newCall(request).execute();
			if (!response.isSuccessful()) {
				throw new IOException("伺服器錯誤: " + response);
			}
			Gson gson = new Gson();
			List queuList = (List) gson.fromJson(response.body().string(), Map.class).get("content");

			return queuList.toArray();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
	}

	private DefaultComboBoxModel findPrintService() {
		printServices = PrintServiceLookup.lookupPrintServices(null, null);
		printers = new String[printServices.length];

		for (int i = 0; i < printServices.length; i++) {
			printers[i] = printServices[i].getName();
		}
		if (printers.length != 0) {
			DefaultComboBoxModel model = new DefaultComboBoxModel(printers);
			return model;
		}
		return new DefaultComboBoxModel();
	}

	public String getRestHost() {
		return restHost;
	}

	public void setRestHost(String restHost) {
		this.restHost = restHost;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton printBt;


	private javax.swing.JLabel message1Label = new JLabel();
	private javax.swing.JLabel message2Label = new JLabel();
	// 印表機資訊
	private JLabel labelPrinterName = new JLabel("印表機名稱");
	private javax.swing.JComboBox<String> printerCb;

	// queue資訊
	private JLabel labelQueueName = new JLabel("帳號名稱");
	private javax.swing.JComboBox<String> queueCb;
	DefaultComboBoxModel<String> queueModel;
	
	// vhost資訊
	private JLabel labelvHostName = new JLabel("OMS主機名稱");
	// 測試用
		javax.swing.JComboBox<String> vhostModel = new javax.swing.JComboBox<String>();
	final static String testVhost = "測試機";
	final static String omsVhost = "正式機";
}
